program        ::= start "HTML Star" block* end "Finished"
block          ::= "~HTML Star~" section* "Star"
section        ::= "<>" statement* "*"
segment        ::= "{|}" statement* "-$"
statement      ::= assignment | functionDeclaration | importStatement | ifStatement
                 | loopStatement | tryCatchFinally | asyncFunction | returnStatement
                 | expression | comment | directive

assignment     ::= "@" "let" identifier ":" type "=" expression
                 | "@" "const" identifier ":" type "=" expression
                 | "@" "var" identifier ":" type "=" expression

functionDeclaration ::= "@" "function" identifier "(" parameterList ")" ":" type "{" statement* "}"

importStatement ::= "@" "import" stringLiteral ";"

ifStatement    ::= "@" "if" "(" expression ")" "{" statement* "}"
                 | "@" "else" "if" "(" expression ")" "{" statement* "}"
                 | "@" "else" "{" statement* "}"

loopStatement  ::= "@" "for" "(" assignment ";" expression ";" expression ")" "{" statement* "}"
                 | "@" "while" "(" expression ")" "{" statement* "}"
                 | "@" "do" "{" statement* "}" "while" "(" expression ")" ";"

tryCatchFinally ::= "@" "try" "{" statement* "}" "@" "catch" "(" identifier ":" type ")" "{" statement* "}"
                 | "@" "finally" "{" statement* "}"

asyncFunction  ::= "@" "async" "function" identifier "(" parameterList ")" ":" type "{" statement* "}"

returnStatement ::= "@" "return" expression ";"

expression     ::= primaryExpression (binaryOperator primaryExpression)*
primaryExpression ::= identifier | numberLiteral | stringLiteral | booleanLiteral
                 | functionCall | "(" expression ")"
functionCall   ::= identifier "(" argumentList ")"
binaryOperator ::= "+" | "-" | "*" | "/" | "%" | "&&" | "||" | "==" | "!=" | "<" | ">"
comment        ::= "^" ".*"
directive      ::= "#" ".*"

parameterList  ::= (parameter ("," parameter)*)?
parameter      ::= identifier ":" type

argumentList   ::= (expression ("," expression)*)?

type           ::= "Number" | "String" | "Boolean" | "Trinary" | "Void" | "Array" "<" type ">"
                 | "Object" | "Tuple" "<" type ("," type)* ">" | "Set" "<" type ">"
                 | "Map" "<" type "," type ">" | "Promise" "<" type ">" | "Optional" "<" type ">"
                 | "Result" "<" type "," type ">" | "Stream" "<" type ">" | "Generator" "<" type ">"
                 | "Coroutine" "<" type ">" | "Future" "<" type ">" | "BigInt" | "Decimal"
                 | "Complex" | "Quaternion" | "Tensor"

identifier     ::= [a-zA-Z_][a-zA-Z0-9_]*
numberLiteral  ::= [0-9]+ ("." [0-9]+)?
stringLiteral  ::= '"' .* '"'
booleanLiteral ::= "true" | "false"
